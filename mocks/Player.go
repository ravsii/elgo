// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Player is an autogenerated mock type for the Player type
type Player struct {
	mock.Mock
}

type Player_Expecter struct {
	mock *mock.Mock
}

func (_m *Player) EXPECT() *Player_Expecter {
	return &Player_Expecter{mock: &_m.Mock}
}

// Identify provides a mock function with given fields:
func (_m *Player) Identify() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Player_Identify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identify'
type Player_Identify_Call struct {
	*mock.Call
}

// Identify is a helper method to define mock.On call
func (_e *Player_Expecter) Identify() *Player_Identify_Call {
	return &Player_Identify_Call{Call: _e.mock.On("Identify")}
}

func (_c *Player_Identify_Call) Run(run func()) *Player_Identify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Player_Identify_Call) Return(_a0 string) *Player_Identify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Player_Identify_Call) RunAndReturn(run func() string) *Player_Identify_Call {
	_c.Call.Return(run)
	return _c
}

// Rating provides a mock function with given fields:
func (_m *Player) Rating() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Player_Rating_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rating'
type Player_Rating_Call struct {
	*mock.Call
}

// Rating is a helper method to define mock.On call
func (_e *Player_Expecter) Rating() *Player_Rating_Call {
	return &Player_Rating_Call{Call: _e.mock.On("Rating")}
}

func (_c *Player_Rating_Call) Run(run func()) *Player_Rating_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Player_Rating_Call) Return(_a0 float64) *Player_Rating_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Player_Rating_Call) RunAndReturn(run func() float64) *Player_Rating_Call {
	_c.Call.Return(run)
	return _c
}

// SetRating provides a mock function with given fields: _a0
func (_m *Player) SetRating(_a0 float64) {
	_m.Called(_a0)
}

// Player_SetRating_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRating'
type Player_SetRating_Call struct {
	*mock.Call
}

// SetRating is a helper method to define mock.On call
//   - _a0 float64
func (_e *Player_Expecter) SetRating(_a0 interface{}) *Player_SetRating_Call {
	return &Player_SetRating_Call{Call: _e.mock.On("SetRating", _a0)}
}

func (_c *Player_SetRating_Call) Run(run func(_a0 float64)) *Player_SetRating_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Player_SetRating_Call) Return() *Player_SetRating_Call {
	_c.Call.Return()
	return _c
}

func (_c *Player_SetRating_Call) RunAndReturn(run func(float64)) *Player_SetRating_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPlayer interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlayer creates a new instance of Player. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlayer(t mockConstructorTestingTNewPlayer) *Player {
	mock := &Player{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
