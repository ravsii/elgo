// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Ratinger is an autogenerated mock type for the Ratinger type
type Ratinger struct {
	mock.Mock
}

type Ratinger_Expecter struct {
	mock *mock.Mock
}

func (_m *Ratinger) EXPECT() *Ratinger_Expecter {
	return &Ratinger_Expecter{mock: &_m.Mock}
}

// Rating provides a mock function with given fields:
func (_m *Ratinger) Rating() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Ratinger_Rating_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rating'
type Ratinger_Rating_Call struct {
	*mock.Call
}

// Rating is a helper method to define mock.On call
func (_e *Ratinger_Expecter) Rating() *Ratinger_Rating_Call {
	return &Ratinger_Rating_Call{Call: _e.mock.On("Rating")}
}

func (_c *Ratinger_Rating_Call) Run(run func()) *Ratinger_Rating_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Ratinger_Rating_Call) Return(_a0 float64) *Ratinger_Rating_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Ratinger_Rating_Call) RunAndReturn(run func() float64) *Ratinger_Rating_Call {
	_c.Call.Return(run)
	return _c
}

// SetRating provides a mock function with given fields: _a0
func (_m *Ratinger) SetRating(_a0 float64) {
	_m.Called(_a0)
}

// Ratinger_SetRating_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRating'
type Ratinger_SetRating_Call struct {
	*mock.Call
}

// SetRating is a helper method to define mock.On call
//   - _a0 float64
func (_e *Ratinger_Expecter) SetRating(_a0 interface{}) *Ratinger_SetRating_Call {
	return &Ratinger_SetRating_Call{Call: _e.mock.On("SetRating", _a0)}
}

func (_c *Ratinger_SetRating_Call) Run(run func(_a0 float64)) *Ratinger_SetRating_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Ratinger_SetRating_Call) Return() *Ratinger_SetRating_Call {
	_c.Call.Return()
	return _c
}

func (_c *Ratinger_SetRating_Call) RunAndReturn(run func(float64)) *Ratinger_SetRating_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRatinger interface {
	mock.TestingT
	Cleanup(func())
}

// NewRatinger creates a new instance of Ratinger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRatinger(t mockConstructorTestingTNewRatinger) *Ratinger {
	mock := &Ratinger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
