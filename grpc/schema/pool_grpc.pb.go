// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: grpc/schema/pool.proto

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PoolClient is the client API for Pool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoolClient interface {
	Add(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Empty, error)
	Match(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Pool_MatchClient, error)
	Remove(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Empty, error)
	Size(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SizeResponse, error)
}

type poolClient struct {
	cc grpc.ClientConnInterface
}

func NewPoolClient(cc grpc.ClientConnInterface) PoolClient {
	return &poolClient{cc}
}

func (c *poolClient) Add(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pool.Pool/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolClient) Match(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Pool_MatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pool_ServiceDesc.Streams[0], "/pool.Pool/Match", opts...)
	if err != nil {
		return nil, err
	}
	x := &poolMatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pool_MatchClient interface {
	Recv() (*PlayerMatch, error)
	grpc.ClientStream
}

type poolMatchClient struct {
	grpc.ClientStream
}

func (x *poolMatchClient) Recv() (*PlayerMatch, error) {
	m := new(PlayerMatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *poolClient) Remove(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pool.Pool/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolClient) Size(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SizeResponse, error) {
	out := new(SizeResponse)
	err := c.cc.Invoke(ctx, "/pool.Pool/Size", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoolServer is the server API for Pool service.
// All implementations must embed UnimplementedPoolServer
// for forward compatibility
type PoolServer interface {
	Add(context.Context, *Player) (*Empty, error)
	Match(*Empty, Pool_MatchServer) error
	Remove(context.Context, *Player) (*Empty, error)
	Size(context.Context, *Empty) (*SizeResponse, error)
	mustEmbedUnimplementedPoolServer()
}

// UnimplementedPoolServer must be embedded to have forward compatible implementations.
type UnimplementedPoolServer struct {
}

func (UnimplementedPoolServer) Add(context.Context, *Player) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPoolServer) Match(*Empty, Pool_MatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Match not implemented")
}
func (UnimplementedPoolServer) Remove(context.Context, *Player) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedPoolServer) Size(context.Context, *Empty) (*SizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Size not implemented")
}
func (UnimplementedPoolServer) mustEmbedUnimplementedPoolServer() {}

// UnsafePoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoolServer will
// result in compilation errors.
type UnsafePoolServer interface {
	mustEmbedUnimplementedPoolServer()
}

func RegisterPoolServer(s grpc.ServiceRegistrar, srv PoolServer) {
	s.RegisterService(&Pool_ServiceDesc, srv)
}

func _Pool_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool.Pool/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServer).Add(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pool_Match_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PoolServer).Match(m, &poolMatchServer{stream})
}

type Pool_MatchServer interface {
	Send(*PlayerMatch) error
	grpc.ServerStream
}

type poolMatchServer struct {
	grpc.ServerStream
}

func (x *poolMatchServer) Send(m *PlayerMatch) error {
	return x.ServerStream.SendMsg(m)
}

func _Pool_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool.Pool/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServer).Remove(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pool_Size_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServer).Size(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool.Pool/Size",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServer).Size(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Pool_ServiceDesc is the grpc.ServiceDesc for Pool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pool.Pool",
	HandlerType: (*PoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Pool_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Pool_Remove_Handler,
		},
		{
			MethodName: "Size",
			Handler:    _Pool_Size_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Match",
			Handler:       _Pool_Match_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/schema/pool.proto",
}
